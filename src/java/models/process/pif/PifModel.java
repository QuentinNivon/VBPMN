/**
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * <p>
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * <p>
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 * <p>
 * fmt
 * Copyright (C) 2014 Pascal Poizat (@pascalpoizat)
 * emails: pascal.poizat@lip6.fr
 */

package models.process.pif;

// fmt

import models.base.IllegalModelException;
import models.base.AbstractModel;
// vbpmn
import models.process.pif.generated.*;
import models.process.pif.generated.Process;
// java
import java.util.HashMap;
import java.util.Map;

public class PifModel extends AbstractModel {

    private static final String DOC = "Generated by VBPMN";

    private ObjectFactory factory;
    private Process model;                      // the PIF Process encapsulated
    private Map<String, WorkflowNode> nodes;    // map of the nodes (used since in the generated model classes we have a list)
    private Map<String, Peer> peers;            // map of the participants (used since in the generated model classes we have a list)
    private Map<String, Message> messages;      // map of the messages (used since in the generated model classes we have a list)


    public PifModel() {
        super();
        factory = new ObjectFactory();
        model = new Process();
        model.setBehaviour(new Workflow());
        model.setDocumentation(DOC);
        nodes = new HashMap<>();
        peers = new HashMap<>();
        messages = new HashMap<>();
    }

    @Override
    public void cleanUp() {
        factory = new ObjectFactory();
        model = new Process();
        model.setBehaviour(new Workflow());
        model.setDocumentation(DOC);
        nodes = new HashMap<>();
        peers = new HashMap<>();
        messages = new HashMap<>();
        super.cleanUp();
    }

    public void setModel(Process model) {
        this.model = model;
    }

    public Process getModel() {
        return model;
    }

    public void setName(String name) {
        model.setName(name);
    }

    /**
     * Adds a node reference to the list of final nodes. The node should exist in the nodes of the model.
     *
     * @param node the node to add as a final node
     * @throws IllegalModelException if node is not in the nodes of the model
     */
    public void addFinalNode(EndEvent node) throws IllegalModelException {
        if (!nodes.containsKey(node.getId())) {
            throw new IllegalModelException(String.format("PIF model incorrect, %s is not a declared node", node));
        }
        model.getBehaviour().getFinalNodes().add(factory.createWorkflowFinalNodes(node));
    }

    /**
     * Sets the initial node. The node should exist in the nodes of the model.
     *
     * @param node the node to add as the initial node
     * @throws IllegalModelException if node is not in the nodes of the model
     */
    public void setInitialNode(InitialEvent node) throws IllegalModelException {
        if (!nodes.containsKey(node.getId())) {
            throw new IllegalModelException(String.format("PIF model incorrect, %s is not a declared node", node));
        }
        model.getBehaviour().setInitialNode(node);
    }

    /**
     * Adds a node to the process. The node should not exist.
     *
     * @param node
     * @throws IllegalModelException
     */
    public void addNode(WorkflowNode node) throws IllegalModelException {
        if (nodes.containsKey(node.getId())) {
            throw new IllegalModelException(String.format("PIF model incorrect, %s is already a declared node", node.getId()));
        }
        nodes.put(node.getId(), node);
        model.getBehaviour().getNodes().add(node);
    }

    /**
     * Finds a node in the map from an id. Returns the node or null if not found.
     *
     * @param id
     * @return
     */
    public WorkflowNode getNode(String id) {
        return nodes.get(id);
    }

    /**
     * Checks if there is a node with a given id.
     *
     * @param id
     * @return
     */
    public boolean hasNode(String id) {
        return nodes.containsKey(id);
    }

    /**
     * Adds a peer to the process. The peer should not exist.
     *
     * @param peer
     * @throws IllegalModelException
     */
    public void addPeer(Peer peer) throws IllegalModelException {
        if (peers.containsKey(peer.getId())) {
            throw new IllegalModelException(String.format("PIF model incorrect, %s is already a declared peer", peer.getId()));
        }
        peers.put(peer.getId(), peer);
        model.getPeers().add(peer);
    }

    /**
     * Finds a peer in the map from an id. Returns the peer or null if not found.
     *
     * @param id
     * @return
     */
    public Peer getPeer(String id) {
        return peers.get(id);
    }

    /**
     * Adds a message to the process. The message should not exist.
     *
     * @param message
     * @throws IllegalModelException
     */
    public void addMessage(Message message) throws IllegalModelException {
        if (messages.containsKey(message.getId())) {
            throw new IllegalModelException(String.format("PIF model incorrect, %s is already a declared message", message.getId()));
        }
        messages.put(message.getId(), message);
        model.getMessages().add(message);
    }

    /**
     * Finds a message in the map from an id. Returns the message or null if not found.
     *
     * @param id
     * @return
     */
    public Message getMessage(String id) {
        return messages.get(id);
    }

    /**
     * Checks if there is a message with a given id.
     *
     * @param id
     * @return
     */
    public boolean hasMessage(String id) {
        return messages.containsKey(id);
    }

}